Variables
	Self: TdxForm
	Session: TSession;
Base types
	Boolean = 1 byte: False..True
	Byte = 1 byte: 0..255
	Cardinal = LongWord
	Char = 1 byte: #0..#255
	Double = 8 bytes: 5.0E-324..1.7E308
	Extended = 10 bytes: 1.9E-4932..1.1E4932
	Int64 = 8 bytes: -2^63..2^63
	Integer = 4 bytes: -2147483648..2147483647
	LongInt = 4 bytes: -2147483648..2147483647
	LongWord = 4 bytes: 0..4294967295
	PChar = null terminated strings
	Single = 4 bytes: 1.5E-45..3.4E38
	ShortInt = 1 byte: -127..128
	SmallInt = 2 bytes: -32768..32767
	String = dynamic any strings
	TStringArray = array of String
	TVariantArray = array of Variant
	UnicodeString = UTF-16 strings
	Variant = any basic type
	WideChar = 2 bytes
	WideString = wide strings
	Word = 2 bytes: 0..65535
Reserved words
	array [..] of ..
	begin .. end
	break
	case x of
	const
	continue
	exit
	for .. to/downto .. do
	function
	if .. then .. else ..
	procedure
	record .. end
	repeat .. until
	set of ..
	type
	uses
	var
	while .. do
Constants
	Colors
		clBlack = $000000
		clMaroon = $000080
		clGreen = $008000
		clOlive = $008080
		clNavy = $800000
		clPurple = $800080
		clTeal = $808000
		clGray = $808080
		clSilver = $C0C0C0
		clRed = $0000FF
		clLime = $00FF00
		clYellow = $00FFFF
		clBlue = $FF0000
		clFuchsia = $FF00FF
		clAqua = $FFFF00
		clLtGray = $C0C0C0
		clDkGray = $808080
		clWhite = $FFFFFF
		clNone = $1FFFFFFF
		clDefault = $20000000
		clMoneyGreen = $C0DCC0
		clSkyBlue = $F0CAA6
		clCream = $F0FBFF
		clMedGray = $A4A0A0
	File attributes
		faReadOnly  = $00000001
		faHidden    = $00000002
		faSysFile   = $00000004
		faVolumeId  = $00000008
		faDirectory = $00000010
		faArchive   = $00000020
		faSymLink   = $00000400
		faAnyFile   = $0000003f
	File mode
		fmCreate = $FF00
		fmOpenRead = 0
		fmOpenWrite = 1
		fmOpenReadWrite = 2
		fmShareCompat = 0
		fmShareExclusive = $10
		fmShareDenyWrite = $20
		fmShareDenyRead = $30
		fmShareDenyNone = $40
	Misc
		LineEnding = #13#10
	Stream offset
		soFromBeginning = 0
		soFromCurrent = 1
		soFromEnd = 2
	Variants
		varempty = 0
		varnull = 1
		varsmallint = 2
		varinteger = 3
		varsingle = 4
		vardouble = 5
		vardate = 7
		varcurrency = 6
		varolestr = 8
		vardispatch = 9
		varerror = 10
		varboolean = 11
		varvariant = 12
		varunknown = 13
		varshortint = 16
		varbyte = 17
		varword = 18
		varlongword = 19
		varint64 = 20
		varstring = $100
		vartypemask = $fff
		vararray = $2000
		varbyref = $4000
	XML
		ELEMENT_NODE = 1
		ATTRIBUTE_NODE = 2
		TEXT_NODE = 3
		CDATA_SECTION_NODE = 4
		ENTITY_REFERENCE_NODE = 5
		ENTITY_NODE = 6
		PROCESSING_INSTRUCTION_NODE = 7
		COMMENT_NODE = 8
		DOCUMENT_NODE = 9
		DOCUMENT_TYPE_NODE = 10
		DOCUMENT_FRAGMENT_NODE = 11
		NOTATION_NODE = 12
Events
	TCreateFormEvent = procedure (Sender: TObject; Form: TdxForm)
	TDataEvent = procedure (Sender: TObject; const ContentLength, CurrentPos: Int64)
	TFieldChangeEvent = procedure (Sender, Control: TObject; const FieldName: String)
	THTTPClientErrorEvent = procedure (Sender: TObject; const ErrorMsg: String)
	TMsgButtonClickEvent = procedure (Sender: TObject; Button: TMsgDlgBtn)
	TNotifyEvent = procedure (Sender: TObject)
	TParamNotifyEvent = procedure (Sender: TObject; const ParamName: String)
	TPasswordEvent = procedure (Sender: TObject; Var RepeatRequest: Boolean)
	TPrintEvent = procedure (Sender: TObject; Action: TPrintAction; const SourceName, FieldName: String; var Value: String; var Accept: Boolean)
	TRedirectEvent = procedure (Sender: TObject; const ASrc: String; var ADest: String)
	TReplaceTagEvent = procedure(Sender: TObject; const TagString: String; TagParams: TStringList; var ReplaceText: String)
	TStringListCompareEvent = function (Sender: TStringList; const s1, s2: String): Integer
	TValidateEvent = procedure (Sender: TObject; var Ok: Boolean)
	TWebServerRequestHandler = function (Sender: TObject; var ARequest: TFPHTTPConnectionRequest; var AResponse : TFPHTTPConnectionResponse): Boolean
Types
	TAccessStatus = (asOk, asCantAppend, asCantEdit, asCantDelete, asModified, asDeleted, asLocked, asHasRef)
	TBrushStyle = (bsSolid, bsClear, bsHorizontal, bsVertical, bsFDiagonal, bsBDiagonal, bsCross, bsDiagCross)
	TColor = Integer
	TCopyFileFlag = (cffOverwriteFile, cffCreateDestDirectory, cffPreserveTime)
	TCopyFileFlags = set of TCopyFileFlag
	TDataSetState = (dsInactive, dsBrowse, dsEdit, dsInsert, dsSetKey, dsCalcFields, dsFilter, dsNewValue, dsOldValue, dsCurValue, dsBlockRead, dsInternalCalc, dsOpening)
	TDataSetState = (dsInactive, dsBrowse, dsEdit, dsInsert, dsOpening) used
	TDateTime = Double
	TDuplicates = (dupIgnore, dupAccept, dupError)
	TFieldType = (ftUnknown, ftString, ftSmallint, ftInteger, ftWord, ftBoolean, ftFloat, ftCurrency, ftBCD, ftDate, ftTime, ftDateTime, ftBytes, ftVarBytes, ftAutoInc, ftBlob, ftMemo, ftGraphic, ftFmtMemo, ftParadoxOle, ftDBaseOle, ftTypedBinary, ftCursor, ftFixedChar, ftWideString, ftLargeint, ftADT, ftArray, ftReference, ftDataSet, ftOraBlob, ftOraClob, ftVariant, ftInterface, ftIDispatch, ftGuid, ftTimeStamp, ftFMTBcd)
	TFieldType = (ftString, ftSmallint, ftInteger, ftFloat, ftDate, ftTime, ftBlob, ftMemo) - Used
	TFontStyle = (fsBold, fsItalic, fsUnderline, fsStrikeOut)
	TFontStyles = set of TFontStyle
	TFormatOption = (foSingleLineArray, foSingleLineObject, foDoNotQuoteMembers, foUseTabchar, foSkipWhiteSpace, foFormatFloat)
	TFormatOptions = set of TFormatOption
	TGotoOption = (gtoDefault, gtoReplaceUrl, gtoNewTab)
	TIFException = (ErNoError, erCannotImport, erInvalidType, ErInternalError, erInvalidHeader, erInvalidOpcode, erInvalidOpcodeParameter, erNoMainProc, erOutOfGlobalVarsRange, erOutOfProcRange, ErOutOfRange, erOutOfStackRange, ErTypeMismatch, erUnexpectedEof, erVersionError, ErDivideByZero, ErMathError,erCouldNotCallProc, erOutofRecordRange, erOutOfMemory, erException, erNullPointerException, erNullVariantError, erInterfaceNotSupported, erCustomError)
	TIniFileOption = (ifoStripComments, ifoStripInvalid, ifoEscapeLineFeeds, ifoCaseSensitive, ifoStripQuotes, ifoFormatSettingsActive)
	TIniFileOptions = set of TIniFileOption
	TJSONType = (jtUnknown, jtNumber, jtString, jtBoolean, jtNull, jtArray, jtObject)
	TLockMode = (lmNoLock, lmPessimistic)
	TLocateOption = (loCaseInsensitive, loPartialKey)
	TLocateOptions = set of TLocateOption
	TMonthNameArray = array [1..12] of String
	TMsgDlgBtn = (mbYes, mbNo, mbOK, mbCancel, mbAbort, mbRetry, mbIgnore, mbAll, mbNoToAll, mbYesToAll, mbHelp)
	TMsgDlgButtons = set of TMsgDlgBtn
	TMsgDlgType = (mtWarning, mtError, mtInformation, mtConfirmation, mtCustom)
	TPenStyle = (psSolid, psDash, psDot, psDashDot, psDashDotDot, psClear, psInsideFrame)
	TPrintAction = (paBeginPrint, paEndPrint, paPrintField, paBeginData, paNextData, paBeforeOpenFile, paAfterOpenFile, paPrintError)
	TReplaceFlag = (rfReplaceAll, rfIgnoreCase)
	TReplaceFlags = set of TReplaceFlag
	TShapeType = (stRectangle, stSquare, stRoundRect, stRoundSquare, stEllipse, stCircle)
	TUseGeneratorOption = (ugNotUse, ugAppend, ugApplyUpdates)
	TVarType = Word	
	TVariantArray2d = array of array of Variant
	TViewType = (vtGridTop, vtGridBottom, vtGridLeft, vtGridRight, vtGridOnly, vtWithoutGrid, vtSimpleForm, vtDefault)
	TWeekNameArray = array [1..7] of String
	TXMLReaderFlag = (xrfAllowLowerThanInAttributeValue, xrfAllowSpecialCharsInAttributeValue, xrfAllowSpecialCharsInComments, xrfPreserveWhiteSpace)
	TXMLReaderFlags = set of TXMLReaderFlag
	TXMLWriterFlag = (xwfSpecialCharsInAttributeValue, xwfPreserveWhiteSpace)
	TXMLWriterFlags = set of TXMLWriterFlag
Records
	TFormatSettings = record
		CurrencyFormat: Byte
		NegCurrFormat: Byte
		ThousandSeparator: Char
		DecimalSeparator: Char
		CurrencyDecimals: Byte
		DateSeparator: Char
		TimeSeparator: Char
		ListSeparator: Char
		CurrencyString: String
		ShortDateFormat: String
		LongDateFormat: String
		TimeAMString: String
		TimePMString: String
		ShortTimeFormat: String
		LongTimeFormat: String
		ShortMonthNames: TMonthNameArray
		LongMonthNames: TMonthNameArray
		ShortDayNames: TWeekNameArray
		LongDayNames: TWeekNameArray
		TwoDigitYearCenturyWindow: Word
	TPoint = record 
		X, Y: LongInt
	TRect = record
		Left, Top, Right, Bottom: Integer
Procedures & Functions
	Arrays
		function GetArrayLength(var Arr: Array): Longint;
		procedure SetArrayLength(var Arr: Array; I: Longint)
	Conditions
		function IIF(Condition, V1, V2: Variant): Variant
		function Nz(V1, V2): Variant
	Date & Time
		function AddDay(const AValue: TDateTime; const ANumberOfDays: Integer): TDateTime
		function AddHour(const AValue: TDateTime; const ANumberOfHours: Int64): TDateTime
		function AddMinute(const AValue: TDateTime; const ANumberOfMinutes: Int64): TDateTime
		function AddMonth(const DateTime: TDateTime; NumberOfMonths: integer): TDateTime
		function AddSecond(const AValue: TDateTime; const ANumberOfSeconds: Int64): TDateTime
		function AddWeek(const AValue: TDateTime; const ANumberOfWeeks: Integer): TDateTime
		function AddYear(const AValue: TDateTime; const ANumberOfYears: Integer ): TDateTime
		function BeginMonth(D: TDateTime): TDateTime
		function BeginQuarter(D: TDateTime): TDateTime
		function BeginWeek(D: TDateTime): TDateTime
		function BeginYear(D: TDateTime): TDateTime
		function CalcPeriod(D1, D2: TDateTime; Detail: Integer; IsAge: Boolean): String
		function Date: TDateTime
		function DateTimeToFileDate(DateTime : TDateTime) : Longint
		function DayOf(const AValue: TDateTime): Word
		function DayOfTheWeek(const DateTime: TDateTime): Word
		function DaysBetween(const ANow, AThen: TDateTime): Integer
		procedure DecodeDate(const DateTime: TDateTime; var Year, Month, Day: Word)
		procedure DecodeTime(const DateTime: TDateTime; var Hour, Min, Sec, MSec: Word)
		function EncodeDate(Year, Month, Day: Word): TDateTime
		function EncodeTime(Hour, Min, Sec, MSec: Word): TDateTime
		function EndMonth(D: TDateTime): TDateTime
		function EndQuarter(D: TDateTime): TDateTime
		function EndWeek(D: TDateTime): TDateTime
		function EndYear(D: TDateTime): TDateTime
		function FileDateToDateTime (Filedate : Longint) :TDateTime
		function FmtDate(D: TDateTime): String
		function FormatDateTime(const fmt: string; D: TDateTime): string
		function GetMonthName(D: TDateTime; Brief: Boolean): String
		function GetWeekName(D: TDateTime; Brief: Boolean): String
		function HourOf(const AValue: TDateTime): Word
		function HoursBetween(const ANow, AThen: TDateTime): Int64
		function MilliSecondsBetween(const ANow, AThen: TDateTime): Int64
		function MinuteOf(const AValue: TDateTime): Word
		function MinutesBetween(const ANow, AThen: TDateTime): Int64
		function MonthOf(const AValue: TDateTime): Word
		function MonthsBetween(const ANow, AThen: TDateTime): Integer
		function Now: TDateTime
		function QuarterOf(D: TDateTime): Word
		function SecondOf(const AValue: TDateTime): Word
		function SecondsBetween(const ANow, AThen: TDateTime): Int64
		function Time: TDateTime
		function TryEncodeDate(Year, Month, Day: Word; var Date: TDateTime): Boolean
		function TryEncodeTime(Hour, Min, Sec, MSec: Word; var Time: TDateTime): Boolean
		function WeekOf(const AValue: TDateTime): Word
		function WeeksBetween(const ANow, AThen: TDateTime): Integer
		function YearOf(const AValue: TDateTime): Word
		function YearsBetween(const ANow, AThen: TDateTime): Integer
	Debuging
		procedure DebugFile(const FileName: String; Value: Variant)
	Dll
		function DllGetLastError: LongInt
		procedure UnloadDll(FileName: string)
	Encoding
		function DecodeBase64(const S: String; Strict: Boolean): String
		function EncodeBase64(const S: String): String
		function EncodeMD5(const S: String): String
		function EncodeSHA1(const S: String): String
		function HMacMD5(const AKey, AMessage: string): string
		function HMacSHA1(const AKey, AMessage: string): string
	Exceptions
		function ExceptionParam: string
		function ExceptionToString(er: TIFException; Param: string): string
		function ExceptionType: TIFException
		procedure RaiseException(Ex: TIFException; Param: string)
		procedure RaiseLastException
	File system
		function ChangeFileExt(const FileName, Extension: string): string
		function CopyFile(const SrcFilename, DestFilename: string; Flags: TCopyFileFlags): boolean
		function CreateDir(const NewDir: String): Boolean
		function DeleteFile(const FileName: String): Boolean
		function DirectoryExists(const Directory: string): Boolean
		function ExcludeLeadingPathDelimiter(Const Path: string): string
		function ExpandFileName(const FileName, BaseDir: string): string
		function ExtractFileDir(Const FileName : string): string
		function ExtractFileDrive(const FileName: string): string
		function ExtractFileExt(const FileName: string): string
		function ExtractFileName(const FileName: string): string
		function ExtractFileNameOnly(const AFilename: string): string
		function ExtractFilePath(const FileName: string): string
		function FileAge(const FileName: string): Longint
		function FileExists(const Filename: string): boolean
		function FileGetAttr(const FileName: String): Longint
		function FileSetAttr(const Filename: String; Attr: longint): Longint
		function FileSetDate(const FileName: String; Age: Longint): Longint
		function FileSize(const FileName: String): Int64
		procedure FindAllDirectories(AList: TStrings; const SearchPath: String; SearchSubDirs: Boolean)
		procedure FindAllFiles(AList: TStrings; const SearchPath: String; SearchMask: String; SearchSubDirs: Boolean; DirAttr: Word)
		function ForceDirectories(const Dir: string): Boolean
		function GetAppDir: String
		function GetCurrentDir: String
		function GetTempDir: String
		function GetTempFileName: String
		function IncludeTrailingPathDelimiter(Const Path : String) : String
		function RemoveDir(const Dir: String): Boolean
		function RenameFile(const OldName, NewName: String): Boolean
		function ShellExecute(const Operation, FileName, Params, WorkDir: String; ShowCmd: LongInt): Boolean
	JSON
		function JSONStringToString(const S: String): String
		function ReadJSONFromFile(const FileName: String) : TJSONData
		function ReadJSONFromStream(Stream: TStream) : TJSONData
		function ReadJSONFromString(const JSON: String) : TJSONData
		function StringToJSONString(const S: String; Strict: Boolean): String
	Math
		function Abs(E: Extended): Extended
		function Cos(E: Extended): Extended
		function Frac(E: Double): Double
		function Int(E: Extended): Extended
		function Pi: Extended
		function Power(base, exponent: Double): Double
		function Random(n: LongInt): LongInt
		function Round(E: Extended): LongInt
		function RoundTo(AValue: Double; Digits: Integer): Double
		function SameValue(A, B: Double; Epsilon: Double): Boolean
		function Sin(E: Extended): Extended
		function Sqrt(E: Extended): Extended
		function Trunc(E: Extended): LongInt
	Misc
		function CreateGUIDString: String
		procedure Dec(Var: Ordinal)
		procedure Exclude(var S: Set; X: Ordinal)
		function GetBuildDate: TDateTime
		function GetComponentFieldName(C: TComponent): String
		function GetFormatSettings: TFormatSettings
		function High(Var: Ordinal): Int64
		procedure Inc(Var: Ordinal)
		procedure Include(var S: Set; X: Ordinal); 
		function Low(Var: Ordinal): Int64
		function Ord(X: Ordinal): Byte
		procedure SetFormatSettings(Settings: TFormatSettings)
		function SizeOf(Identifier): LongInt
	Strings
		function AnsiLowerCase(S: string): string
		function AnsiUpperCase(S: string): string
		function Chr(C: Byte): Char
		function Copy(S: String; iFrom, iCount: LongInt): String
		function DateToStr(D: TDateTime): string
		procedure Delete(var S: String; iFrom, iCount: LongInt)
		function FloatToStr(E: Extended): string
		function FillZeros(E: Double; N: Integer): String
		function Format(const Fmt: String; Args: array of const): String
		function FormatFloat(Const Format: String; Value: Double): String
		function Int64ToStr(I: Int64): string
		function IntToHex(I: Int64; Digits: Integer): String
		function IntToStr(I: Int64): string
		procedure Insert(InsertStr: String; var TargetStr: String; iPos: LongInt)
		function Length(S: String): Integer
		function LowerCase(S: String): String
		function PadL(S: String; I: LongInt): String
		function PadR(S: String; I: LongInt): String
		function PadZ(S: String; I: LongInt): String
		function Pos(SubStr, S: String): LongInt
		function Replicate(C: Char; I: LongInt): string
		procedure SetLength(S: String; NewLength: Integer);
		procedure SplitStr(const S: String; Delim: Char; SL: TStrings)
		function StrGet(var S: string; I: Integer): Char
		procedure StrSet(C: Char; I: Integer; var S: string)
		function StrToDate(const S: string): TDateTime
		function StrToDateTime(const S: string): TDateTime
		function StrToFloat(S: string): Extended
		function StrToInt(S: string): LongInt
		function StrToInt64(S: string): Int64
		function StrToInt64Def(S: string; def: Int64): Int64
		function StrToIntDef(S: string; def: LongInt): LongInt
		function StrToTime(const S: String): TDateTime
		function StringOfChar(C: Char; I: LongInt): string
		function StringReplace(const S, OldPattern, NewPattern: string;  Flags: TReplaceFlags): string
		function TimeToStr(Time: TDateTime): string
		function Trim(S: String): String
		function TryStrToDate(const S: string; out Value: TDateTime): Boolean
		function TryStrToDateTime(const S: string; out Value: TDateTime): Boolean
		function TryStrToFloat(const S: String; out Value: Double): Boolean
		function TryStrToInt(const s: string; out i: LongInt) : boolean
		function TryStrToInt64(const s: string; out i: Int64) : boolean
		function TryStrToTime(const S: string; out Value: TDateTime): Boolean
		function UpperCase(S: String): String
		function WStrGet(var S: String; I: Integer): WideChar
		procedure WStrSet(C: String; I: Integer; var S: String)
	Totals
		function DAvg(DataSet: TObject; const FieldName: String): Double
		function DCount(DataSet: TObject): Integer
		function DMax(DataSet: TObject; const FieldName: String): Variant
		function DMerge(DataSet: TObject; const FieldName, Delimiter: String): String
		function DMin(DataSet: TObject; const FieldName: String): Variant
		function DSum(DataSet: TObject; const FieldName: String): Double
	UTF8-strings
		function RurToWords(Money: Currency): String
		procedure StringToUtf8Char(const S: String; var Utf8Char: TUtf8Char)
		function ToWordsRu(Money: Currency): String
		function UTF16ToUTF8(const S: UnicodeString): String
		function Utf8CharToString(Utf8Char: TUtf8Char): String
		function UTF8Copy(const S: String; StartCharIndex, CharCount: LongInt): String
		function UTF8CompareStr(const S1, S2: string): LongInt
		function UTF8CompareText(const S1, S2: string): LongInt
		procedure UTF8Delete(var S: String; StartCharIndex, CharCount: LongInt)
		function UTF8Length(const S: string): LongInt
		function UTF8LowerCase(const AInStr: string): String
		procedure UTF8Insert(const InsertStr: String; var TargetStr: String; StartCharIndex: LongInt)
		function UTF8Pos(const SearchForText, SearchInText: String; StartPos: LongInt): LongInt
		function UTF8StringReplace(const S, OldPattern, NewPattern: String; Flags: TReplaceFlags): String
		function UTF8ToUTF16(const S: String): UnicodeString
		function Utf8ToWinCP(const S: String): String
		function UTF8UpperCase(const AInStr: string): String
		function WinCPToUtf8(const S: String): String
	Variants
		function Null: Variant
		function Unassigned: Variant
		function VarArrayDimCount(const Arr: Variant): LongInt
		function VarArrayGet(var Arr: Variant; I: Integer): Variant
		function VarArrayHighBound(const Arr: Variant; Dim: LongInt): LongInt
		function VarArrayLowBound(const Arr: Variant; Dim: LongInt): LongInt
		function VarArrayOf(const Values: array of Variant): Variant
		procedure VarArraySet(V: Variant; I: Integer; var Arr: Variant)
		function VarAsType(const V: Variant; aVarType: TVarType): Variant
		procedure VarCast(var Dest: variant; const Source: variant; VarType: longint)
		function VarIsEmpty(const V: Variant): Boolean
		function VarIsNothing(V: Variant): Boolean
		function VarIsNull(const V: Variant): Boolean
		function VarToStr(const V: Variant): String
		function VarType(const V: Variant): TVarType
	Web
		function EncodeURLElement(S: String): String
		function DecodeURLElement(const S: String): String
	XML
		function ReadXmlFromFile(const FileName: String; Flags: TXMLReaderFlags): TXmlDocument
		function ReadXmlFromStream(Stream: TStream; Flags: TXMLReaderFlags): TXmlDocument
		function ReadXmlFromString(const XmlData: String; Flags: TXMLReaderFlags): TXmlDocument
		procedure ReadXmlNodeFromString(var AParentNode: TDOMNode; const XmlData: String; Flags: TXMLReaderFlags)
		procedure WriteXmlToFile(ADoc: TXmlDocument; const FileName: String; Flags: TXMLWriterFlags)
		procedure WriteXmlToStream(ADoc: TXmlDocument; Stream: TStream; Flags: TXMLWriterFlags)
		procedure WriteXmlToString(ADoc: TXmlDocument; var XmlData: String; Flags: TXMLWriterFlags)
		procedure WriteXmlNodeToString(ANode: TDOMNode; var XmlData: String; Flags: TXMLWriterFlags)
TBrush = class(TPersistent)
	property Color: TColor [rw]
	property Style: TBrushStyle [rw]
#TCollection = class(TPersistent)
	procedure Clear
	property Count: Integer [r]
	property Items[Index: Integer]: TCollectionItem [r]
#TCollectionItem = class(TPersistent)
	property Collection: TCollection [rw]
	property Index: Integer [rw]	
#TComponent = class(TPersistent)
	constructor Create(AOwner: TComponent)
	function FindComponent(AName: string): TComponent
	property Owner: TComponent [rw]
	property Components[Index: Integer]: TComponent [r]
	property ComponentCount: Integer [r]
	property Name: String [rw]
#TControl = class(TComponent)
	procedure Hide
	procedure Show
	property BoundsRect: TRect [rw]
	property Caption: String [rw]
	property Color: TColor [rw]
	property Enabled: Boolean [rw]
	property Font: TFont [rw]
	property Height: Integer [rw]
	property Left: Integer [rw]
	property Parent: TWinControl [rw]
	property ParentFont: Boolean [rw]
	property TabOrder: Integer [rw]
	property TabStop: Boolean [rw]
	property Top: Integer [rw]
	property Width: Integer [rw]
	property Visible: Boolean [rw]
TCookie = class(TCollectionItem)
	procedure Expire
	property AsString: String [r]    
	property Domain: string [rw]
	property Expires: TDateTime [rw]
	property HttpOnly: Boolean [rw]
	property Name: string [rw]
	property Path: string [rw]
	property Secure: Boolean [rw]
	property Value: string [rw]
TCookies = class(TCollection)
	function  Add: TCookie
	function CookieByName(AName : String) : TCookie
	function FindCookie(AName : String): TCookie
	function IndexOfCookie(AName : String) : Integer
	property Items[Index: Integer]: TCookie [r] default
TCsvData = class(TObject)
	constructor Create
	procedure LoadFromFile(const AFileName: String; FromANSI: Boolean)
	procedure LoadFromStream(AStream: TStream; FromANSI: Boolean)
	procedure SaveToFile(const AFileName: String; ToANSI: Boolean)
	procedure SaveToStream(AStream: TStream; ToANSI: Boolean)
	property Cells[Col, Row: Integer]: String [rw] default
	property ColCount: Integer [rw]
	property Delimiter: Char [rw]
	property RowCount: Integer [rw]
TDOMNode = class(TObject)
	property Attr[Index: LongWord]: TDOMNode [rw]
	property AttrCount: LongWord [r]
	property Attrs[Name: String]: String [rw]
	property ChildNodes: TDOMNodeList [r]
	property FirstChild: TDOMNode [r]
	property LastChild: TDOMNode [r]
	property NextSibling: TDOMNode [r]
	property NodeName: String [r]
	property NodeType: Integer [r]
	property NodeValue: String [rw]
	property OwnerDocument: TXmlDocument [r]
	property ParentNode: TDOMNode [r]
	property PreviousSibling: TDOMNode [r]
	function AppendChild(NewChild: TDOMNode): TDOMNode
	function AttrExists(const AName: String): Boolean
	function CloneNode(Deep: Boolean): TDOMNode
	function FindNode(const ANodeName: String): TDOMNode
	function GetLevel: Longint
	function HasChildNodes: Boolean
	function InsertBefore(NewChild, RefChild: TDOMNode): TDOMNode
	function RemoveAttr(const AName: String): TDOMNode
	function RemoveChild(OldChild: TDOMNode): TDOMNode
	function ReplaceChild(NewChild, OldChild: TDOMNode): TDOMNode
TDOMNodeList = class(TObject)
	property Count: LongWord [r]
	property Item[Index: LongWord]: TDOMNode [r] default
TFPHttpConnectionRequest = class(THttpHeader)
	property Files: TUploadedFiles [r]
TFPHttpConnectionResponse = class(THttpHeader)
	procedure SendContent
	procedure SendHeaders
	property Age: String [rw]
	property Allow: String [rw]
	property CacheControl: String [rw]
	property Code: Integer [rw]
	property CodeText: String [rw]
	property Content: String [rw]
	property ContentLocation: String [rw]
	property ContentMD5: String [rw]
	property ContentRange: String [rw]
	property Contents: TStrings [rw]
	property ContentSent: Boolean [r]
	property ContentStream: TStream [rw]
	property Cookies: TCookies [r]
	property ETag: String [rw]
	property FirstHeaderLine: String [rw]
	property FreeContentStream: Boolean [rw]
	property HeadersSent: Boolean [r]
	property ProxyAuthenticate: String [rw]
TField = class(TComponent)
	procedure Clear
	procedure FocusControl
	property Alignment: TAlignment [rw]
	property AsBoolean: Boolean [rw]
	property AsCurrency: Currency [rw]
	property AsDateTime: TDateTime [rw]
	property AsFloat: Double [rw]
	property AsInteger: LongInt [rw]
	property AsString: String [rw]
	property AsVariant: Variant [rw]
	property CanModify: Boolean [r]
	property DataType: TFieldType [r]
	property FieldName: String [r]
	property IsNull: Boolean [r]
	property OldValue: Variant [r]
	property ReadOnly: Boolean [rw]
	property State: TDataSetState [r]
	property Value: Variant [rw]
TFileStream = class(TStream)
	constructor Create(FileName: string; Mode: Word)
	property Handle: Integer [r]
TFilterField = class(TObject)
	property EndValue[Index: Integer]: String [r]
	property FieldName: String [r]
	property IsNot: Boolean [rw]
	property IsNull: Boolean [rw]
	property Value[Index: Integer]: String [r]
	property Values: TStringList [r]
TFilterObject = class(TObject)
	function AddField(const FieldName: String): TFilterField
	procedure Clear
	procedure DeleteField(F: TFilterField)
	function FindField(const FieldName: String): TFilterField
	property Count: Integer [r]
	property Fields[Index: Integer]: TFilterField [r] default
TFont = class(TPersistent)
	property Color: TColor [rw]
	property Height: Integer [rw]
	property Name: String [rw]
	property Size: Integer [rw]
	property Style: TFontStyles [rw] 
THttpClient = class(TObject)
	procedure AddHeader(const AHeader, AValue: String)
	procedure FormPost(const URL: string; FormData:  TStrings)
	function GetHeader(const AHeader: String): String
	function IndexOfHeader(const AHeader: String): Integer
	procedure Send(const AMethod, AURL: String)
	procedure StreamFormPost(const AURL: string; FormData: TStrings; const AFieldName, AFileName: string; const AStream: TStream)
	procedure Terminate
	property MultiThreaded: Boolean [rw]
	property AllowRedirect: Boolean [rw]
	property Connected: Boolean [r]
	property ConnectionCount: Integer [r]
	property Content: String [r]
	property ContentStream: TStream [rw]
	property Cookies: TStrings [rw]
	property HTTPversion: String [rw]
	property IOTimeout: Integer [rw]
	property KeepConnection: Boolean [rw]
	property MaxRedirects: Byte [rw]
	property OnDataReceived: TDataEvent [rw]
	property OnError: THttpClientErrorEvent [rw]
	property OnFinish: TNotifyEvent [rw]
	property OnHeaders: TNotifyEvent [rw]
	property OnPassword: TPasswordEvent [rw]
	property OnRedirect: TRedirectEvent [rw]
	property Password: String [rw]
	property Proxy: TProxyData [rw]
	property RequestBody: TStream [rw]
	property RequestHeaders: TStrings [rw]
	property ResponseHeaders: TStrings [r]
	property ResponseStatusCode: Integer [r]
	property ResponseStatusText: String [r]
	property ServerHTTPVersion: String [r]
	property Terminated: Boolean [r]
	property UserName: String [rw]
THttpHeader = class(TObject)
	property Accept: String [rw]
	property AcceptCharset: String [rw]
	property AcceptEncoding: String [rw]
	property AcceptLanguage: String [rw]
	property Authorization: String [rw]
	property Connection: String [rw]
	property Content: String [rw]
	property ContentEncoding: String [rw]
	property ContentFields: TStrings [r]
	property ContentLanguage: String [rw]
	property ContentLength: Integer [rw]
	property ContentType: String [rw]
	property Cookie: String [rw]
	property CookieFields: TStrings [rw]
	property CustomHeaders: TStringList [r] 
	property Date: String [rw]
	property Expires: String [rw]
	property From: String [rw]
	property Host : String [rw]
	property HttpVersion: String [rw]
	property HTTPXRequestedWith: String [rw]
	property IfModifiedSince: String [rw]
	property LastModified: String [rw]
	property Location: String [rw]
	property Method: String [rw]
	property PathInfo: String [rw]
	property PathTranslated: String [rw]
	property Pragma: String [rw]
	property ProtocolVersion: String [rw]
	property Query: String [rw]
	property QueryFields: TStrings [r]
	property Referer: String [rw]
	property RemoteAddr: String [rw]
	property RemoteHost: String [rw]
	property RetryAfter: String [rw]
	property ScriptName: String [rw]
	property Server: String [rw]
	property ServerPort: Word [rw]
	property SetCookie: String [rw]
	property URL: String [rw]
	property UserAgent: String [rw]
	property Via: String [rw]
	property Warning: String [rw]
	property WWWAuthenticate: String [rw]
TIniFile = class(TObject)
	constructor Create(const AFileName: string; AOptions: TIniFileOptions)
	procedure DeleteKey(const Section, Ident: String)
	procedure EraseSection(const Section: string)
	function ReadBinaryStream(const Section, Name: string; Value: TStream): Integer
	function ReadBool(const Section, Ident: string; Default: Boolean): Boolean
	function ReadDate(const Section, Ident: string; Default: TDateTime): TDateTime
	function ReadDateTime(const Section, Ident: string; Default: TDateTime): TDateTime
	function ReadFloat(const Section, Ident: string; Default: Double): Double
	function ReadInt64(const Section, Ident: string; Default: Int64): Int64
	function ReadInteger(const Section, Ident: string; Default: Longint): Longint
	function ReadString(const Section, Ident, Default: string): string
	function ReadTime(const Section, Ident: string; Default: TDateTime): TDateTime
	function SectionExists(const Section: string): Boolean
	procedure WriteBinaryStream(const Section, Ident: string; Value: TStream)
	procedure WriteBool(const Section, Ident: string; Value: Boolean)
	procedure WriteDate(const Section, Ident: string; Value: TDateTime)
	procedure WriteDateTime(const Section, Ident: string; Value: TDateTime)
	procedure WriteFloat(const Section, Ident: string; Value: Double)
	procedure WriteInt64(const Section, Ident: string; Value: Int64)
	procedure WriteInteger(const Section, Ident: string; Value: Longint)
	procedure WriteTime(const Section, Ident: string; Value: TDateTime)
	procedure WriteString(const Section, Ident, Value: String)
	procedure ReadSection(const Section: string; Strings: TStrings)
	procedure ReadSectionRaw(const Section: string; Strings: TStrings)
	procedure ReadSectionValues(const Section: string; Strings: TStrings)
	procedure ReadSections(Strings: TStrings)
	procedure UpdateFile
	function ValueExists(const Section, Ident: string): Boolean
	property CaseSensitive: Boolean [rw]
	property CacheUpdates: Boolean [rw]
	property EscapeLineFeeds: boolean [r]
	property FileName: string [r]
	property StripQuotes: Boolean [rw]
TJSONArray = class(TJSONData)
	constructor CreateArray(Elements: array of const)
	function Add(Value: Variant): Integer
	function AddArray(Arr: TJSONArray): Integer
	function AddObject(Obj: TJSONObject): Integer
	procedure Delete(Index : Integer)
	procedure Exchange(Index1, Index2: Integer)
	function IndexOf(obj: TJSONData): Integer      
	procedure Insert(Index: Integer; Value: Variant)
	procedure InsertArray(Index: Integer; Arr: TJSONArray)
	procedure InsertObject(Index: Integer; Obj: TJSONObject)
	procedure Remove(Item : TJSONData)
TJSONData = class(TObject)
	procedure Clear
	function Clone : TJSONData
	function FindPath(Const APath : String) : TJSONdata
	function FormatJSON(Options: TFormatOptions; Indentsize: Integer): String
	function GetPath(Const APath : String) : TJSONdata
	function JSONType: TJSONType
	property AsBoolean: Boolean [rw]
	property AsFloat: Double [rw]
	property AsInt64: Int64 [rw]
	property AsInteger: Integer [rw]
	property AsJSON: String [r]  
	property AsString: String [rw]
	property AsUnicodeString: UnicodeString [rw]
	property Count: Integer [r]
	property IsNull: Boolean [r]
	property Items[Index: Integer]: TJSONData [rw] default
	property Value: variant [rw]
TJSONObject = class(TJSONData)
	constructor CreateObject(Elements: array of const)
	function Add(const AName: String; Value: Variant): Integer
	function AddArray(const AName: String; Arr: TJSONArray): Integer
	function AddObject(const AName: String; Obj: TJSONObject): Integer
	procedure Delete(Index : Integer)
	function IndexOf(obj: TJSONData): Integer
	function IndexOfName(const AName: String): Integer
	procedure Remove(Item : TJSONData)
	property Elements[Name: String]: TJSONData [rw] default 
	property Names[Index: Integer]: String [r]	
TMemoryStream = class(TStream)
	procedure Clear
	procedure LoadFromFile(FileName: string)
	procedure LoadFromStream(Stream: TStream)
	procedure SaveToFile(FileName: string)
	procedure SaveToStream(Stream: TStream)
	procedure SetSize(NewSize: LongInt)
#TObject = class
	constructor Create
	procedure Free
	property ClassName: String [r]
TParamList = class(TObject)
	procedure Clear
	function ParamExists(const Name: String): Boolean
	property Count: Integer [r]
	property Names[Index: Integer]: String [r]
	property Objects[Name: String]: TObject [rw]
	property ObjectFromIndex[Index: Integer]: TObject [rw]
	property OnGetParam: TParamNotifyEvent [rw]
	property OnSetParam: TParamNotifyEvent [rw]
	property Values[Name: String]: Variant [rw] default
	property ValueFromIndex[Index: Integer]: Variant
TPen = class(TPersistent)
	property Color: TColor [rw]
	property Style: TPenStyle [rw]
	property Width: Integer [rw] 
#TPersistent = class(TObject)
	procedure Assign(Source: TPersistent)
TProxyData = class(TPersistent)
	property Host: String [rw]
	property Password: String [rw]
	property Port: Word [rw]
	property UserName: String [rw]	
TSession = class(TObject)
	function CreateForm(const FormName: String): TdxForm
	procedure Debug(Value: Variant)
	function EvalExpr(const Expr: String; Fm: TdxForm): Variant
	function FindForm(const FormName: String; ARecId: Integer): TdxForm
	function GetCacheDir: String
	function GetCurrentDatabase: String
	function GetCurrentRole: String
	function GetCurrentUser: String
	function GetExprVar(const AName: String): Variant
	function GetTemplatesDir: String
	procedure SQLExecute(const SQL: String)
	function SQLSelect(const SQL: String): TdxSQLQuery
	function SetExprVar(const aName: String; aValue: Variant): Variant
	property FormCount: Integer [r]
	property Forms[Index: Integer]: TdxForm [r]
	property Request: TFPHTTPConnectionRequest [r]
	property OnCreateForm: TCreateFormEvent [rw]
	property OnDatabaseClose: TNotifyEvent [rw]
	property OnDestroyForm: TCreateFormEvent [rw]
	property OnHandleRequest: TWebServerRequestHandler [rw]
#TStream = class(TObject)
	function Read(Buffer: string; Count: LongInt): LongInt
	function Write(Buffer: string; Count: LongInt): LongInt
	function Seek(Offset: LongInt; Origin: Word): LongInt
	procedure ReadBuffer(Buffer: string; Count: LongInt)
	procedure WriteBuffer(Buffer: string; Count: LongInt)
	function CopyFrom(Source: TStream; Count: Int64): Int64
	property Position: Int64 [rw]
	property Size: Int64 [rw]
TStringList = class(TStrings)
	function Find(S: string; var Index: Integer): Boolean
	procedure Sort
	property CaseSensitive: Boolean [rw]
	property Duplicates: TDuplicates [rw]
	property OnChange: TNotifyEvent [rw]
	property OnChanging: TNotifyEvent [rw]
	property Sorted: Boolean [rw]
TStringListUTF8 = class(TStringList)
	property OnCompare: TStringListCompareEvent [rw]
TStringStream = class(TMemoryStream)
	constructor Create(AString: string)
	property DataString: String [r]
#TStrings = class(TPersistent)
	function Add(S: string): Integer
	function AddObject(S: string; AObject: TObject): Integer
	procedure AddStrings(Strings: TStrings)
	procedure BeginUpdate
	procedure Clear
	procedure Delete(Index: Integer)
	procedure EndUpdate
	function Equals(Strings: TStrings): Boolean
	procedure Exchange(Index1, Index2: Integer)
	function IndexOf(const S: string): Integer
	function IndexOfName(Name: string): Integer
	function IndexOfObject(AObject: TObject): Integer
	procedure Insert(Index: Integer; S: string)
	procedure InsertObject(Index: Integer; S: string; AObject: TObject)
	procedure LoadFromFile(FileName: string);
	procedure LoadFromStream(Stream: TStream)
	procedure Move(CurIndex, NewIndex: Integer)
	procedure SaveToFile(FileName: string)
	procedure SaveToStream(Stream: TStream)
	property Capacity: Integer [rw]
	property Delimiter: Char [rw]
	property DelimitedText: String [rw]
	property NameValueSeparator: Char [rw]
	property QuoteChar: Char [rw]
	property Count: Integer [r]
	property Text: String [rw]
	property CommaText: String [rw]
	property Strings[Index: Integer]: String [rw] default
	property StrictDelimiter: Boolean [rw]
	property Objects[Index: Integer]: TObject [rw]
	property Names[Index: Integer]: String [r]
	property Values[Name: String]: String [rw]
	property ValueFromIndex[Index: Integer]: String [rw]
TTemplate = class(TPersistent)
	function GetContent: String
	function HasContent: Boolean
	procedure ClearTags
	property EndDelimiter: String [rw]
	property FileName: String [rw]
	property OnReplaceTag: TReplaceTagEvent [rw]
	property ParamEndDelimiter: String [rw]
	property ParamStartDelimiter: String [rw]
	property ParamValueSeparator: String [rw]
	property StartDelimiter: String [rw]
	property Tags[Name: String]: Variant [rw]
	property TagByIndex[Index: Integer]: Variant [rw]
	property TagCount: Integer [r]
	property Template: String [rw]
TUploadFile = class(TCollectionItem)
	property ContentType: String [rw]
	property Description: String [rw]
	property Disposition: String [rw]
	property FieldName: String [rw]
	property FileName: String [rw]
	property LocalFileName: String [rw]
	property Size: Int64 [rw]
	property Stream: Tstream [r]
TUploadedFiles = class(TCollection)
	property Files[Index: Integer]: TUploadFile [r] default
#TWinControl = class(TControl)
	property Controls[Index: Integer]: TControl [r]
	property ControlCount: Integer [r]
TXmlDocument = class(TDOMNode)
	property Root: TDOMNode [r]
	function CreateCDATA(const Data: String): TDOMNode  
	function CreateNode(const NodeName: String): TDOMNode
	function CreateText(const AText: String): TDOMNode	
TdxButton = class(TControl)
	procedure Click
	property OnClick: TNotifyEvent [rw]
TdxCalcEdit = class(TControl)
	property CheckExpression: String [r]
	property DefaultValue: String [r] 
	property Editable: Boolean [r]
	property Expression: String [r]
	property FieldName: String [r]
	property Id: Integer [r]
	property MaxValue: Double [r]
	property MinValue: Double [r]
	property Precision: Integer [r]
	property Required: Boolean [r]
TdxCheckBox = class(TControl)
	property CheckExpression: String [r]
	property CheckedText: String [rw]
	property DefaultValue: String [r] 
	property Editable: Boolean [r]
	property Expression: String [r]
	property FieldName: String [r]
	property Id: Integer [r]
	property UnCheckedText: String [rw]
TdxComboBox = class(TControl)
	property CheckExpression: String [r]
	property DefaultValue: String [r] 
	property Editable: Boolean [r]
	property Expression: String [r]
	property FieldName: String [r]
	property FieldSize: Integer [r]
	property Filter: String [rw]
	property Id: Integer [r]
	property Items: TStrings [rw]
	property SourceFieldName: String [r]
	property SourceFormName: String [r]
TdxCounter = class(TControl)
	property CheckExpression: String [r]
	property FieldName: String [r]
	property Id: Integer [r]
	property Required: Boolean [r]
TdxDBImage = class(TControl)
	procedure Clear
	procedure LoadFromFile(const FileName: String)
	procedure SaveToFile(const FileName: String)
	procedure SaveToStream(St: TStream)
	function WasChanged: Boolean
	property CheckExpression: String [r]
	property FieldName: String [r]
	property Id: Integer [r]
	property PrintSize: Integer [rw]
	property ReadOnly: Boolean [rw]
	property Required: Boolean [r]
	property ShowThumbnail: Boolean [rw]
	property SourceFileName: String [r]
	property StorageFolder: String [r]
	property StorageType: Integer [r]
	property StoredFileName: String [r]
	property ThumbSize: Integer [r]  
TdxDateEdit = class(TControl)
	property CheckExpression: String [r]
	property DateNow: Boolean [r]
	property DefaultValue: String [r] 
	property Editable: Boolean [r]
	property Expression: String [r]
	property FieldName: String [r]
	property Id: Integer [r]
	property Required: Boolean [r]
TdxEdit = class(TControl)
	property CheckExpression: String [r]
	property DefaultValue: String [r] 
	property Editable: Boolean [r]
	property Expression: String [r]
	property FieldName: String [r]
	property FieldSize: Integer [r]
	property Id: Integer [r]
	property Required: Boolean [r]
TdxFile = class(TControl)
	procedure Clear
	procedure LoadFromFile(const FileName: String)
	procedure SaveToFile(const FileName: String)
	procedure SaveToStream(St: TStream)
	function WasChanged: Boolean
	property CheckExpression: String [r]
	property Description: String [rw]
	property FieldName: String [r]
	property FieldSize: Integer [r]
	property Id: Integer [r]
	property Required: Boolean [r]
	property SourceFileName: String [r]
	property StorageFolder: String [r]
	property StorageType: Integer [r]
	property StoredFileName: String [r]
TdxForm = class(TWinControl)
	function Append: TAccessStatus
	function BOF: Boolean
	function CanAppend: TAccessStatus
	function CanDelete: TAccessStatus
	function CanEdit: TAccessStatus
	procedure Cancel
	procedure Close
	function Delete: TAccessStatus
	procedure DisableScrollEvents
	function EOF: Boolean
	function Edit: TAccessStatus
	procedure EnableScrollEvents
	function FindComponentByFieldName(const FieldName: String): TComponent
	function GetRecordCaption: String
	function GetRecordsCaption: String
	procedure GotoForm(const AFormName: String; ARecId: Integer; AGotoOption: TGotoOption)
	function GotoRecord(RecId: Integer): Boolean;
	procedure GotoReport(const AReportName: String; AGotoOption: TGotoOption)
	procedure GotoUrl(const Url: String; AGotoOption: TGotoOption)
	function Insert: TAccessStatus
	function Locate(const FieldNames: String; FieldValues: array of Variant; Options: TLocateOptions): Boolean;
	procedure MessageDlg(const Title, Msg: String; MsgType: TMsgDlgType; Buttons: TMsgDlgButtons; ClickHandler: TMsgButtonClickEvent)
	procedure MsgBox(const Title, Msg: String)
	procedure MoveBy(Distance: Integer)
	procedure MoveFirst
	procedure MoveLast
	procedure MoveNext
	procedure MovePrior
	procedure MoveTo(RecNo: Integer)
	procedure Open
	procedure OpenRecord(RecId: Integer)
	procedure OpenRecords(const CustomFilter: String; Form: TdxForm; SelectCondition: Boolean)
	function Opened: Boolean
	procedure Post
	function Print(const TemplateName, OutFileName: String; out Errors: String; OpenFile: Boolean): String
	function RecId: Integer
	function RecNo: Integer
	function RecordCount: Integer
	procedure Refresh
	function ScrollEventsDisabled: Boolean
	function Validate: Boolean
	function WhoEdit(RecId: Integer): String
	property ActionResult: Variant [rw]
	property AsDT[Name: String]: TDateTime [r]
	property AsF[Name: String]: Double [r]
	property AsI[Name: String]: Integer [r]
	property AsS[Name: String]: String [r]
	property CustomFilter: String [rw]
	property CustomFilterForm: TdxForm [rw]
	property Field[Name: String]: TField [r]
	property Fields[Name: String]: Variant [rw] default
	property Files[Name: String]: TdxFile [r]
	property Filter: TFilterObject [r]
	property FormByIndex[Index: Integer]: TdxForm [r]
	property FormCaption: String [r]
	property FormCount: Integer [r]
	property Forms[Name: String]: TdxForm [r]
	property Id: Integer [r]
	property Images[Name: String]: TdxDBImage [r]
	property LockMode: TLockMode [r]
	property Modified: Boolean [r]
	property Msgs: TStringList [rw]
	property OldValues[Name: String]: Variant [r]
	property OnAfterCancel: TNotifyEvent [rw]
	property OnAfterClose: TNotifyEvent [rw]
	property OnAfterDelete: TNotifyEvent [rw]
	property OnAfterDuplicate: TNotifyEvent [rw]
	property OnAfterEdit: TNotifyEvent [rw]
	property OnAfterInsert: TNotifyEvent [rw]
	property OnAfterOpen: TNotifyEvent [rw]
	property OnAfterPost: TNotifyEvent [rw]
	property OnAfterScroll: TNotifyEvent [rw]
	property OnBeforeCancel: TNotifyEvent [rw]
	property OnBeforeClose: TNotifyEvent [rw]
	property OnBeforeDelete: TNotifyEvent [rw]
	property OnBeforeDuplicate: TNotifyEvent [rw]
	property OnBeforeEdit: TNotifyEvent [rw]
	property OnBeforeInsert: TNotifyEvent [rw]
	property OnBeforeOpen: TNotifyEvent [rw]
	property OnBeforePost: TNotifyEvent [rw]
	property OnBeforeScroll: TNotifyEvent [rw]
	property OnDestroy: TNotifyEvent [rw]
	property OnFieldChange: TFieldChangeEvent [rw]
	property OnPrint: TPrintEvent [rw]
	property OnShowForm: TNotifyEvent [rw]
	property OnStateChange: TNotifyEvent [rw]
	property OnValidate: TValidateEvent [rw]
	property PId: Integer [r]
	property Params: TParamList
	property ParentForm: TdxForm [r]
	property QueryByIndex[Index: Integer]: TdxQueryGrid
	property QueryCount: Integer [r]
	property Queries[QueryName: String]: TdxQueryGrid
	property RecordCaption: String [rw]
	property RecordsCaption: String [rw]
	property State: TDataSetState [r]
	property UseSelectCondition: Boolean [rw]
	property ViewType: TViewType [r]
TdxGrid = class(TControl)
TdxGroupBox = class(TWinControl)
TdxImage = class(TControl);
	procedure Clear
	procedure LoadFromFile(const FileName: String)
	procedure LoadFromStream(St: TStream)
	procedure SaveToFile(const FileName: String)
	procedure SaveToStream(St: TStream)
	property Center: Boolean [rw]
	property ImageName: String [rw]
	property KeepSize: Boolean [rw]
	property Proportional: Boolean [rw]
	property Stretch: Boolean [rw]	
TdxLabel = class(TControl)
	property FieldName: String [r]
	property Expression: String [r]
TdxLookupComboBox = class(TControl)
	property CheckExpression: String [r]
	property DefaultValue: String [r] 
	property Editable: Boolean [r]
	property Expression: String [r]
	property FieldName: String [r]
	property Filter: String [rw]
	property HideList: Boolean [rw]
	property Id: Integer [r]
	property Required: Boolean [r]
	property SourceFieldName: String [r]
	property SourceFormName: String [r]
	property OnCreateForm: TCreateFormEvent [rw]
TdxMemo = class(TControl)
	property CheckExpression: String [r]
	property DefaultValue: String [r] 
	property Editable: Boolean [r]
	property Expression: String [r]
	property FieldName: String [r]
	property FieldSize: Integer [r]
	property Id: Integer [r]
	property Required: Boolean [r]
TdxObjectField = class(TControl)
	property FieldName: String [r]
	property Id: Integer [r]
	property FieldId: Integer [r]  
	property ObjId: Integer [r]
TdxPageControl = class(TControl)
	property ActivePageIndex: Integer [rw]
	property PageCount: Integer [r]
	property Pages[Index: Integer]: TdxTabSheet [r]
TdxPivotGrid = class(TControl)
TdxQueryGrid = class(TControl)
	function BOF: Boolean
	procedure Close
	procedure DisableScrollEvents
	function EOF: Boolean
	procedure EnableScrollEvents
	function GetSourceFileName(const FieldName: String): String
	function GetStoredFileName(const FieldName: String): String
	function GotoRecord(RecId: Integer): Boolean
	function Locate(const FieldNames: String; FieldValues: array of Variant; Options: TLocateOptions): Boolean
	procedure MoveBy(Distance: Integer)
	procedure MoveFirst
	procedure MoveLast
	procedure MoveNext
	procedure MovePrior
	procedure MoveTo(RecNo: Integer)
	function RecId: Integer
	function RecNo: Integer
	function RecordCount: Integer
	procedure Refresh
	procedure SaveThumbnailToStream(const FieldName: String; St: TStream)
	procedure SaveToFile(const FieldName, AFileName: String)
	procedure SaveToStream(const FieldName: String; St: TStream)
	function ScrollEventsDisabled: Boolean
	property AsDT[Name: String]: TDateTime [r]
	property AsF[Name: String]: Double [r]
	property AsI[Name: String]: Integer [r]
	property AsS[Name: String]: String [r]
	property Editable: Boolean [r]
	property Fields[Name: String]: Variant [r] default
	property ManualRefresh: Boolean [rw]
	property OnAfterClose: TNotifyEvent [rw]
	property OnAfterOpen: TNotifyEvent [rw]
	property OnAfterScroll: TNotifyEvent [rw]
	property OnBeforeClose: TNotiftEvent [rw]
	property OnBeforeOpen: TNotifyEvent [rw]
	property OnBeforeScroll: TNotifyEvent [rw]
	property OnCreateForm: TCreateFormEvent [rw]
	property QueryName: String [r]
TdxRecordId = class(TControl)
	property FieldName: String [r]
	property Id: Integer [r]
TdxSQLQuery = class(TObject)
	procedure Append
	procedure ApplyUpdates
	function BOF: Boolean
	procedure Cancel
	procedure CancelUpdates
	procedure Delete
	function EOF: Boolean
	procedure Edit
	function FieldCount: Integer
	procedure LoadFromStream(const FieldName: String; Stream: TStream)
	function Locate(const FieldNames: String; FieldValues: array of Variant; Options: TLocateOptions): Boolean
	procedure MoveBy(Distance: Integer)
	procedure MoveFirst
	procedure MoveLast
	procedure MoveNext
	procedure MovePrior
	procedure MoveTo(RecNo: Integer)
	procedure Post
	procedure SaveToStream(const FieldName: String; Stream: TStream)
	function RecNo: Integer
	function RecordCount: Integer
	property AsDT[Name: String]: TDateTime [rw]
	property AsF[Name: String]: Double [rw]
	property AsI[Name: String]: Integer [rw]
	property AsS[Name: String]: String [rw]
	property Field[Index: Integer]: TField [r]
	property Fields[Name: String]: Variant [rw] default
	property State: TDataSetState [r]
	property UseExecuteBlock: Boolean [rw]
	property UseGenerator: TUseGeneratorOption [rw]	
TdxShape = class(TControl)
	property Brush: TBrush [rw]
	property Pen: TPen [rw]
	property Shape: TShapeType [rw]
TdxTabSheet = class(TWinControl)
	property PageIndex: Integer [r]
	property TabVisible: Boolean [rw]
TdxTimeEdit = class(TControl)
	property CheckExpression: String [r]
	property CurTime: Boolean [r]
	property DefaultValue: String [r] 
	property Editable: Boolean [r]
	property Expression: String [r]
	property FieldName: String [r]
	property Id: Integer [r]
	property Required: Boolean [r]